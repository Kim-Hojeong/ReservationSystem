#include <stdio.h>
#include <stdlib.h> //for malloc
#include <string.h> //for strcmp

#define MAX_VERTEX 15 //15?????? ????????????(????????????)
#define MAX_STACK_SIZE 20
#define MAXID 21
#define TRUE 1
#define FALSE 0
#define DCRATE 0.8

typedef struct {
	int r_id;
	char ID[MAXID];
	char routine[MAX_VERTEX];
	int cost;
	int class;
	int distance;
	int via;
}element;

typedef struct _Node {
	struct _Node *link; //???????????? ???????????? ?????????
	int vertex; //???????????? ????????
	int distance;
	int cost_business;
	int cost_firstclass;
}Node;

typedef struct {
	int data[MAX_STACK_SIZE];
	int top;
}stack;

typedef struct _list {
	element* data;
	struct _list *link;
}list;

typedef struct {
	list *link;
	int size;
}list_head;

typedef struct {
	Node* head;
}Graph;

Graph graph[MAX_VERTEX]; //?????????????????????????? ?????????????????? ???????????? ???????? ????????????????????

list_head reservation;

int distance[MAX_VERTEX][MAX_VERTEX] = {
	{ 0, 0, 500, 450, 0, 0, 550, 0, 0, 0, 0, 0, 0, 0, 1000 },
	{ 0, 0, 0, 0, 0, 0, 0, 300, 0, 0, 0, 0, 0, 0, 0 },
	{ 500, 0, 0, 150, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
	{ 450, 0, 150, 0, 150, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
	{ 0, 0, 0, 150, 0, 0, 150, 0, 0, 0, 0, 0, 0, 0, 0 },
	{ 0, 0, 0, 0, 0, 0, 0, 100, 200, 150, 0, 0, 0, 0, 0 },
	{ 550, 0, 0, 0, 150, 0, 0, 100, 0, 0, 0, 300, 0, 0, 0 },
	{ 0, 300, 0, 0, 0, 100, 100, 0, 0, 0, 0, 0, 0, 0, 500 },
	{ 0, 0, 0, 0, 0, 200, 0, 0, 0, 0, 0, 100, 0, 0, 0 },
	{ 0, 0, 0, 0, 0, 150, 0, 0, 0, 0, 0, 0, 100, 0, 0 },
	{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 0, 0 },
	{ 0, 0, 0, 0, 0, 0, 300, 0, 100, 0, 0, 0, 0, 0, 300 },
	{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 100, 0, 0, 100, 0 },
	{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 0, 200 },
	{ 1000, 0, 0, 0, 0, 0, 0, 500, 0, 0, 0, 300, 0, 200, 0 }
};

//business?????? cost,(50+distance*0.5)??????,100~550??????
int cost_business[MAX_VERTEX][MAX_VERTEX] = {
	{ 0, 0, 300, 275, 0, 0, 325, 0, 0, 0, 0, 0, 0, 0, 550 },
	{ 0, 0, 0, 0, 0, 0, 0, 200, 0, 0, 0, 0, 0, 0, 0 },
	{ 300, 0, 0, 125, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
	{ 275, 0, 125, 0, 125, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
	{ 0, 0, 0, 125, 0, 0, 125, 0, 0, 0, 0, 0, 0, 0, 0 },
	{ 0, 0, 0, 0, 0, 0, 0, 100, 150, 125, 0, 0, 0, 0, 0 },
	{ 325, 0, 0, 0, 125, 0, 0, 100, 0, 0, 0, 200, 0, 0, 0 },
	{ 0, 200, 0, 0, 0, 100, 100, 0, 0, 0, 0, 0, 0, 0, 300 },
	{ 0, 0, 0, 0, 0, 150, 0, 0, 0, 0, 0, 100, 0, 0, 0 },
	{ 0, 0, 0, 0, 0, 125, 0, 0, 0, 0, 0, 0, 100, 0, 0 },
	{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 0, 0 },
	{ 0, 0, 0, 0, 0, 0, 200, 0, 100, 0, 0, 0, 0, 0, 200 },
	{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 100, 0, 0, 100, 0 },
	{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 0, 150 },
	{ 550, 0, 0, 0, 0, 0, 0, 300, 0, 0, 0, 200, 0, 150, 0 }
};

//firstclass?????? cost, (200+distance*0.8)??????,280~1000??????
int cost_firstclass[MAX_VERTEX][MAX_VERTEX] = {
	{ 0, 0, 600, 560, 0, 0, 640, 0, 0, 0, 0, 0, 0, 0, 1000 },
	{ 0, 0, 0, 0, 0, 0, 0, 440, 0, 0, 0, 0, 0, 0, 0 },
	{ 600, 0, 0, 320, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
	{ 560, 0, 320, 0, 320, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
	{ 0, 0, 0, 320, 0, 0, 320, 0, 0, 0, 0, 0, 0, 0, 0 },
	{ 0, 0, 0, 0, 0, 0, 0, 280, 360, 320, 0, 0, 0, 0, 0 },
	{ 640, 0, 0, 0, 320, 0, 0, 280, 0, 0, 0, 440, 0, 0, 0 },
	{ 0, 440, 0, 0, 0, 280, 280, 0, 0, 0, 0, 0, 0, 0, 600 },
	{ 0, 0, 0, 0, 0, 360, 0, 0, 0, 0, 0, 280, 0, 0, 0 },
	{ 0, 0, 0, 0, 0, 320, 0, 0, 0, 0, 0, 0, 280, 0, 0 },
	{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 0, 0 },
	{ 0, 0, 0, 0, 0, 0, 440, 0, 280, 0, 0, 0, 0, 0, 440 },
	{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 280, 280, 0, 0, 280, 0 },
	{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 280, 0, 360 },
	{ 1000, 0, 0, 0, 0, 0, 0, 600, 0, 0, 0, 440, 0, 360, 0 }
};

void init(); //distance ??????????????????????????? ???????????????????????????????? ??????????
void print_menu(); //menu?????? print?????????????? ????????
void insert_start_destination();
void submenu_reservation(); //????????????
void recode_reservation();
void search_routine();
void submenu_confirmation(); //????????????????????
void submenu_concellation(); //?????????????????????
void submenu_record(); //??????????????????
int contain_string();
void initReservation();
void initSTACK();
void pushSTACK();
int topSTACK();
void popSTACK();
void append();
void delete_list();

int main() {

	init(); //?????????????????????????? ?????????? ???????????? ????????????.
	initReservation();
	char MenuNumber;
	while (1)
	{
		print_menu();
		scanf("%c", &MenuNumber);
		switch (MenuNumber)
		{
		case '1': {
			char garbege;
			while (1) {
				scanf("%c", &garbege);
				if (garbege == '\n')
					break;
			}
			char start, destination;
			insert_start_destination(&start, &destination);
			submenu_reservation(&start, &destination);
			break;
		}
		case '2':
			submenu_confirmation();
			break;
		case '3':
			submenu_concellation();
			break;
		case '4':
			submenu_record();
			break;
		case '5':
			return 0;
		default:
			printf("Wrong.Enter new number\n");
			break;
		}
	}
}

void print_menu()
{
	printf("--------- M E N U ----------\n");
	printf("1. RESERVATION\n"); //????????????,insert?????????
	printf("2. CONFIRMATION\n"); //????????????????????,search?????????, ???????????????????? ???????? ???????????????????? ????????????
	printf("3. CANCELLATION\n"); //?????????????????????
	printf("4. RECORD\n"); //??????????????????, ?????????????????????????? ???????? ??????????????? ???????????? ????????????
	printf("5. EXIT\n"); //???????????????? ????????????
	printf("----------------------------\n");
	printf("You select a menu number : ");
}
//distance ??????????????????????????? ???????????????????????????????? ??????????
void init() {
	//init???????????? printf?????? ??????????????? ??????????????????????? ?????????????????????? ????????????
	//???????????? source??????????????????????? printf ?????????????????????????? ??????????????????????????
	for (int i = 0; i < MAX_VERTEX; i++)
		graph[i].head = NULL;
	for (int x = 0; x < MAX_VERTEX; x++)
	{
		for (int y = 0; y < MAX_VERTEX; y++)
		{
			if (distance[x][y] != FALSE)
			{
				if (graph[x].head == NULL) {
					Node *new = (Node*)malloc(sizeof(Node));
					graph[x].head = new;
					new->vertex = y;
					new->distance = distance[x][y];
					new->cost_business = cost_business[x][y];
					new->cost_firstclass = cost_firstclass[x][y];
					new->link = NULL;
				}
				else
				{
					Node *move = graph[x].head;
					while (TRUE)
					{
						if (move->link == NULL)
							break;
						move = move->link;
					}
					Node *new = (Node*)malloc(sizeof(Node));
					new->vertex = y;
					new->link = NULL;
					new->distance = distance[x][y];
					new->cost_business = cost_business[x][y];
					new->cost_firstclass = cost_firstclass[x][y];
					move->link = new;
				}
			}
		}
	}
	//for (int x = 0; x < MAX_VERTEX; x++)
	//{
	//	printf("%c -> ", x + 65); //?????????????? ????????????????? ?????????????? %c?????? x+65?????? ????????????, ???????????????? ???????? ?????????????????? +97?????? ???????????????????? ??????
	//	Node *temp = graph[x].head;
	//	printf("%5c : (dis)%3d (cost_bus)%3d (cost_first)%4d \n", temp->vertex + 65, temp->distance, temp->cost_business, temp->cost_firstclass);
	//	temp = temp->link;

	//	while (1)
	//	{
	//		if (temp == NULL)
	//			break;
	//		printf("%10c : (dis)%3d (cost_bus)%3d (cost_first)%4d \n", temp->vertex + 65, temp->distance, temp->cost_business, temp->cost_firstclass);
	//		temp = temp->link;
	//	}
	//	printf("\n");
	//}

}

void insert_start_destination(char *start, char *dest) {
	while (1) {
		printf("Input starting point (A ~ O) : ");
		scanf("%c", start);
		char garbege;
		while (1) {
			scanf("%c", &garbege);
			if (garbege == '\n')
				break;
		}
		if (*start < 65 || *start > 79)
			printf("Wrong input\n");
		else
			break;
	}
	while (1) {
		printf("Input destination (A ~ O) : ");
		scanf("%c", dest);
		char garbege;
		while (1) {
			scanf("%c", &garbege);
			if (garbege == '\n')
				break;
		}
		if (*dest < 65 || *dest > 79)
			printf("Wrong input\n");
		else if (*dest == *start)
			printf("Wrong input\n");
		else
			break;
	}
}
//????????????
void submenu_reservation(char *starting_point, char *destination) {
	//printf("start : %c destination : %c\n", *starting_point, *destination);
	int start = (int)*starting_point - 65;
	int end = (int)*destination - 65;
	stack A;
	initSTACK(&A);
	int tempArr[MAX_VERTEX] = { 0 };
	pushSTACK(&A, start);
	int minmin[2][MAX_VERTEX + 4];
	minmin[0][15] = 99999;
	minmin[1][17] = 99999;
	printf("searching...\n");
	search_routine(start, end, &A, tempArr, start, minmin);
	initSTACK(&A);
	printf("\n\n\nminimum cost flight\n");
	for (int i = 0; i < MAX_VERTEX; i++) {
		if (minmin[0][i + 1] == 99999) {
			printf("%c\n", minmin[0][i] + 65);
			break;
		}
		printf("%c -> ", minmin[0][i] + 65);
	}
	printf("business class : $ %d\n", minmin[0][15]);
	printf("first    class : $ %d\n", minmin[0][16]);
	printf("distance : %d km\n", minmin[0][17]);
	printf("via : %d\n\n\n", minmin[0][18]);

	printf("minimum distance flight\n");
	for (int i = 0; i < MAX_VERTEX; i++) {
		if (minmin[1][i + 1] == 99999) {
			printf("%c\n", minmin[1][i] + 65);
			break;
		}
		printf("%c -> ", minmin[1][i] + 65);
	}
	printf("business class : $ %d\n", minmin[1][15]);
	printf("first    class : $ %d\n", minmin[1][16]);
	printf("distance : %d km\n", minmin[1][17]);
	printf("via : %d\n\n\n", minmin[1][18]);

	int type;
	element *new_r = (element*)malloc(sizeof(element));
	
	while (1) {
		printf("What is your choice?\n1. minimum cost\n2. minimum distance\n3. EXIT\nINPUT : ");
		char choice;
		scanf("%c", &choice);
		if (choice == '1') {
			type = 0;
			scanf("%c", &choice);
			break;
		}
		else if (choice == '2') {
			type = 1;
			scanf("%c", &choice);
			break;
		}
		else if (choice == '3') {
			scanf("%c", &choice);
			return;
		}
		else {
			printf("Wrong input\n");
			while (1) {
				scanf("%c", &choice);
				if (choice == '\n')
					break;
			}
		}
	}
	for(int i = 0; i < MAX_VERTEX; i++)
	{
		new_r->routine[i] = minmin[type][i] + 65;
		if (minmin[type][i] == 99999) 
		{
			new_r->routine[i] = '\0';
			break;
		}
	}
	new_r->distance = minmin[type][17];
	new_r->via = minmin[type][18];

	while (1) {
		printf("What is your choice?\n1. business class\n2. first class\n3. EXIT\nINPUT : ");
		char choice;
		scanf("%c", &choice);
		if (choice == '1') {
			new_r->cost = minmin[type][15];
			new_r->class = 0;
			recode_reservation(new_r);
			return;
		}
		else if (choice == '2') {
			new_r->cost = minmin[type][16];
			new_r->class = 1;
			recode_reservation(new_r);
			return;
		}
		else if (choice == '3') {
			return;
		}
		else {
			printf("Wrong input\n");
			while (1) 
			{
				scanf("%c", &choice);
				if (choice == '\n')
					break;
			}
		}
	}
}

void search_routine(int start, int end, stack *A, int *tempArr, int p, int min_min[2][MAX_VERTEX + 4]) {
	if (p == end) {
		int cost1 = 0, cost2 = 0, dist = 0;
		for (int i = 0; i < A->top; i++) {
			int k = A->data[i];
			int j = A->data[i + 1];
			printf("%c -> ", k + 65);
			Node *tmp;
			tmp = graph[k].head;
			while (1)
			{
				if (tmp->vertex == j)
					break;
				tmp = tmp->link;
			}
			cost1 = cost1 + tmp->cost_business;
			cost2 = cost2 + tmp->cost_firstclass;
			dist = dist + tmp->distance;
		}
		for (int i = 0; i < A->top - 1; i++)
		{
			cost1 = cost1*DCRATE;
			cost2 = cost2*DCRATE;
		}
		printf("%c", topSTACK(A) + 65);
		printf("\n");
		printf("cost : $ %d ~ $ %d, distance : %d km", cost1, cost2, dist);
		printf("\n");
		if (min_min[0][15] > cost1) {
			for (int i = 0; i <= A->top; i++)
				min_min[0][i] = A->data[i];
			for (int i = A->top + 1; i < MAX_VERTEX; i++)
				min_min[0][i] = 99999;
			min_min[0][15] = cost1;
			min_min[0][16] = cost2;
			min_min[0][17] = dist;
			min_min[0][18] = A->top - 1;
		}
		if (min_min[1][17] > dist) {
			for (int i = 0; i <= A->top; i++)
				min_min[1][i] = A->data[i];
			for (int i = A->top + 1; i < MAX_VERTEX; i++)
				min_min[1][i] = 99999;
			min_min[1][15] = cost1;
			min_min[1][16] = cost2;
			min_min[1][17] = dist;
			min_min[1][18] = A->top - 1;
		}
		return;
	}
	tempArr[p] = 1;
	Node *tmp = graph[p].head;
	while (1)
	{
		if (tmp == NULL)
			break;
		if (tempArr[tmp->vertex] == 1) {
			tmp = tmp->link;
			continue;
		}
		pushSTACK(A, tmp->vertex);
		search_routine(start, end, A, tempArr, tmp->vertex, min_min);
		popSTACK(A);
		tmp = tmp->link;
	}
	tempArr[p] = 0;
}

void recode_reservation(element *r_element) {
	char ID[MAXID];
	char garbege;
	scanf("%c", &garbege);
	while (1) {
		printf("Input your ID : ");
		int i = 0;
		while (1) {
			if (i == 20) {
				ID[i] = '\0';
				while (1) {
					char garbege;
					scanf("%c", &garbege);
					if (garbege == '\n')
						break;
				}
				break;
			}
			scanf("%c", &ID[i]);
			if (ID[i] == '\n') {
				ID[i] = '\0';
				break;
			}
			i++;
		}
		printf("Is your ID correct?\n1. correct\n2. wrong\ninput : ");
		int index;
		scanf("%d", &index);
		if (index == 1) {
			while (1) {
				scanf("%c", &garbege);
				if (garbege == '\n')
					break;
			}
			break;
		}
		else {
			while (1) {
				scanf("%c", &garbege);
				if (garbege == '\n')
					break;
			}
		}
	}
	for (int i = 0; i < MAXID; i++)
	{
		r_element->ID[i] = ID[i];
		if (ID[i] == '\0')
			break;
	}
	int last_RID = 1;
	list *tmp;
	tmp = reservation.link;
	for (int i = 0; i < reservation.size; i++)
	{
		tmp = tmp->link;
	}
	if (tmp != NULL)
	{
		last_RID = (tmp->data->r_id) + 1;

	}
	r_element->r_id = last_RID;
	append(&reservation, r_element);
	printf("waiting...\n");
	
	FILE *f2;
	f2 = fopen("reservation.txt", "a");
	fprintf(f2, "R%8.8d, %s, ", r_element->r_id, r_element->ID);
	fprintf(f2, "%s, ", r_element->routine);

	fprintf(f2, "%d, %d, %d, %d\n", r_element->cost, r_element->class, r_element->distance, r_element->via);
	printf("reservation is complete.\n");
	fclose(f2);
}
//????????????????????
void submenu_confirmation() {
	char inputID[MAXID];
	char garbege;
	while (1)
	{
		scanf("%c", &garbege);
		if (garbege == '\n')
			break;
	}
	printf("Input your ID : ");
	for (int i = 0; i < MAXID; i++)
	{
		scanf("%c", &inputID[i]);
		if (inputID[i] == '\n') {
			inputID[i] = '\0';
			break;
		}
		if (i == 20) {
			if (inputID[20] == '\n')
			{
				inputID[20] = '\0';
				break;
			}
			while (1)
			{
				scanf("%c", &garbege);
				if (garbege == '\n')
					break;
			}
		}
	}
	list *tmp = reservation.link;
	printf("Number User ID              Routine         Cost Class Distance Via\n");
	printf("=========================================================================\n");
	int i = 1;
	for (int j = 0; j <= reservation.size; j++)
	{
		if (contain_string(tmp, inputID) == 1)
		{
			printf("%6.d %20s %15s %4d  %4d     %4.d  %.2d\n", i, tmp->data->ID, tmp->data->routine, tmp->data->cost, tmp->data->class, tmp->data->distance, tmp->data->via);
			i++;
		}
		tmp = tmp->link;
	}
	printf("=========================================================================\n");
}
//?????????????????????
void submenu_concellation() {
	char inputID[MAXID];
	char garbege;
	while (1)
	{
		scanf("%c", &garbege);
		if (garbege == '\n')
			break;
	}
	printf("Input your ID : ");
	for (int i = 0; i < MAXID; i++)
	{
		scanf("%c", &inputID[i]);
		if (inputID[i] == '\n') {
			inputID[i] = '\0';
			break;
		}
		if (i == 20) {
			if (inputID[20] == '\n')
			{
				inputID[20] = '\0';
				break;
			}
			while (1)
			{
				scanf("%c", &garbege);
				if (garbege == '\n')
					break;
			}
		}
	}
	list *tmp = reservation.link;
	printf("Number User ID              Routine         Cost Class Distance Via\n");
	printf("=========================================================================\n");
	int i = 1;
	for (int j = 0; j <= reservation.size; j++)
	{
		if (contain_string(tmp, inputID) == 1)
		{
			printf("%6.d %20s %15s %4d  %4d     %4.d  %.2d\n", i, tmp->data->ID, tmp->data->routine, tmp->data->cost, tmp->data->class, tmp->data->distance, tmp->data->via);
			i++;
		}
		tmp = tmp->link;
	}
	int cancel;
	if (i == 1)
	{
		printf("no result\n\n");
		return;
	}
	while (1)
	{	
		printf("What would you like to cancel(1 ~ %d) : ", --i);

		scanf("%d", &cancel);
		if (cancel >= 1 && cancel <= i)
		{
			scanf("%c", &garbege);
			break;
		}
		else
		{
			printf("Wrong input.\n");
			while (1)
			{
				scanf("%c", &garbege);
				if (garbege == '\n')
					break;
			}
			break;
		}
	}
	tmp = reservation.link;
	i = 1;
	int index = 0;
	while (tmp != NULL)
	{
		if (contain_string(tmp, inputID) == 1) {
			if (i == cancel)
			{
				delete_list(&reservation, index);
				break;
			}
			else
				i++;
		}
		index++;
		tmp = tmp->link;
	}

	FILE *fp;
	fp = fopen("reservation.txt", "w");
	tmp = reservation.link;
	for(int i = 0; i<=reservation.size; i++)
	{
		fprintf(fp, "R%8.8d, %s, ", tmp->data->r_id, tmp->data->ID);
		fprintf(fp, "%s, ", tmp->data->routine);
		fprintf(fp, "%d, %d, %d, %d\n", tmp->data->cost, tmp->data->class, tmp->data->distance, tmp->data->via);
		tmp = tmp->link;
	}
	printf("Cancel is complete.\n");
	fclose(fp);
}

int contain_string(list *tmp, char text[MAXID]) {
	int i = 0;
	int j = 0;
	while (1)
	{
		if (text[j] == '\0')
			return 1;
		else if (tmp->data->ID[i] == '\0')
			return 0;
		if (tmp->data->ID[i] == text[j] || tmp->data->ID[i] == text[j] + 32 || tmp->data->ID[i] == text[j] - 32)
		{
			i++;
			j++;
			continue;
		}
		else {
			i++;
			j = 0;
		}
	}
}
//??????????????????
void submenu_record() {
	char password[100] = { "1234" };
	int i = 0;
	while (1)
	{
		if (i == 3)
		{
			printf("ERROR\n");
			return;
		}
		char pass[100];
		printf("password (remaining count %d): ", 3 - i);
		scanf("%s", pass);
		if (strcmp(password, pass) == 0)
		{
			char garbege;
			scanf("%c", &garbege);
			break;
		}
		else
		{
			printf("wrong input.\n");
			i++;
		}
	}
	list *tmp;
	tmp = reservation.link;
	printf("Number     User ID               Routine          Cost Class Distance Via\n");
	printf("=========================================================================\n");

	for (int i = 0; i <= reservation.size; i++)
	{
		printf("R%8.8d   %20s %15s  %4d  %4d     %4.d  %.2d\n", tmp->data->r_id, tmp->data->ID, tmp->data->routine, tmp->data->cost, tmp->data->class, tmp->data->distance, tmp->data->via);
		if (tmp->link != NULL)
		{
			tmp = tmp->link;
			continue;
		}
		else
		{
			tmp->link = reservation.link;
			break;
		}
	}
	printf("=========================================================================\n");
}

void initReservation()
{
	FILE *fp;
	fp = fopen("reservation.txt", "r");
	reservation.link = NULL;
	reservation.size = -1;
	if (fp == NULL)
	{
		//printf("No reservation\n");
		//printf("=========================================================================\n");
		return;
	}

	while (fgetc(fp) != EOF)
	{
		element *new_element = (element*)malloc(sizeof(element));
		fscanf(fp, "%d", &new_element->r_id);
		fgetc(fp);
		fgetc(fp);
		int i = 0;
		while (1) 
		{
			new_element->ID[i] = fgetc(fp);
			if (new_element->ID[i] == ',') 
			{
				new_element->ID[i] = '\0';
				break;
			}
			i++;
		}
		i = 0;
		fgetc(fp);
		while (1)
		{
			new_element->routine[i] = fgetc(fp);
			if (new_element->routine[i] == ',')
			{
				new_element->routine[i] = '\0';
				break;
			}
			i++;
		}
		fgetc(fp);
		fscanf(fp, "%d", &new_element->cost);
		fgetc(fp);
		fgetc(fp);
		fscanf(fp, "%d", &new_element->class);
		fgetc(fp);
		fgetc(fp);
		fscanf(fp, "%d", &new_element->distance);
		fgetc(fp);
		fgetc(fp);
		fscanf(fp, "%d", &new_element->via);
		fgetc(fp);
		append(&reservation, new_element);
	}
	//list *tmp;
	//tmp = reservation.link;
	//printf("Number     User ID               Routine          Cost Class Distance Via\n");
	//printf("=========================================================================\n");
	//for(int i = 0; i <= reservation.size;i++)
	//{
	//	printf("R%8.8d   %20s %15s  %4d  %4d     %4.d  %.2d\n", tmp->data->r_id, tmp->data->ID, tmp->data->routine, tmp->data->cost, tmp->data->class, tmp->data->distance, tmp->data->via);
	//	if (tmp->link != NULL)
	//	{
	//		tmp = tmp->link;
	//		continue;
	//	}
	//	else
	//	{
	//		tmp->link = reservation.link;
	//		break;
	//	}
	//}
	//printf("=========================================================================\n");
}

void append(list_head *A, element *new_data) {
	list *new = (list*)malloc(sizeof(list));
	new->data = new_data;
	new->link = A->link;
	if (A->link == NULL)
	{
		A->link = new;
		A->size = 0;
		new->link = A->link;
		return;
	}
	list *temp = A->link;
	for(int i = 0; i < A->size; i++)
		temp = temp->link;
	temp->link = new;
	(A->size)++;
	return;
}

void delete_list(list_head *A, int index) {
	list *tmp;

	tmp = A->link;
	if (index == 0) {
		A->link = tmp->link;
		free(tmp);
		(A->size)--;
		return;
	}
	int i = 0;
	while (i < index - 1)
	{
		tmp = tmp->link;
		i++;
	}
	list *tmp2;
	tmp2 = tmp->link;
	tmp->link = tmp2->link;
	(A->size)--;
	free(tmp2);
}

void initSTACK(stack *A) {
	A->top = -1;
}

void pushSTACK(stack *A, int item) {
	(A->top)++;
	A->data[A->top] = item;

}

void popSTACK(stack *A) {
	A->top--;
}

int topSTACK(stack *A) {
	return A->data[A->top];
}
